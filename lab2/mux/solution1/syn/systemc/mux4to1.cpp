// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mux4to1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mux4to1::ap_const_logic_1 = sc_dt::Log_1;
const bool mux4to1::ap_const_boolean_1 = true;
const sc_logic mux4to1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> mux4to1::ap_const_lv2_3 = "11";
const sc_lv<2> mux4to1::ap_const_lv2_2 = "10";
const sc_lv<2> mux4to1::ap_const_lv2_1 = "1";
const sc_lv<2> mux4to1::ap_const_lv2_0 = "00";
const sc_lv<1> mux4to1::ap_const_lv1_0 = "0";

mux4to1::mux4to1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_sel_V_read_read_fu_58_p2);
    sensitive << ( ap_start );
    sensitive << ( sel_V );

    SC_METHOD(thread_y_V);
    sensitive << ( ap_start );
    sensitive << ( d0_V );
    sensitive << ( d1_V );
    sensitive << ( d2_V );
    sensitive << ( d3_V );
    sensitive << ( sel_V_read_read_fu_58_p2 );

    SC_METHOD(thread_y_V_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( sel_V_read_read_fu_58_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mux4to1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, sel_V, "(port)sel_V");
    sc_trace(mVcdFile, d0_V, "(port)d0_V");
    sc_trace(mVcdFile, d1_V, "(port)d1_V");
    sc_trace(mVcdFile, d2_V, "(port)d2_V");
    sc_trace(mVcdFile, d3_V, "(port)d3_V");
    sc_trace(mVcdFile, y_V, "(port)y_V");
    sc_trace(mVcdFile, y_V_ap_vld, "(port)y_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, sel_V_read_read_fu_58_p2, "sel_V_read_read_fu_58_p2");
#endif

    }
    mHdltvinHandle.open("mux4to1.hdltvin.dat");
    mHdltvoutHandle.open("mux4to1.hdltvout.dat");
}

mux4to1::~mux4to1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void mux4to1::thread_ap_done() {
    ap_done = ap_start.read();
}

void mux4to1::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void mux4to1::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void mux4to1::thread_sel_V_read_read_fu_58_p2() {
    sel_V_read_read_fu_58_p2 = sel_V.read();
}

void mux4to1::thread_y_V() {
    if (!esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        y_V = ap_const_lv1_0;
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,2,2>(sel_V_read_read_fu_58_p2.read(), ap_const_lv2_0))) {
        y_V = d0_V.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,2,2>(sel_V_read_read_fu_58_p2.read(), ap_const_lv2_1))) {
        y_V = d1_V.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,2,2>(sel_V_read_read_fu_58_p2.read(), ap_const_lv2_2))) {
        y_V = d2_V.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,2,2>(sel_V_read_read_fu_58_p2.read(), ap_const_lv2_3))) {
        y_V = d3_V.read();
    } else {
        y_V = "X";
    }
}

void mux4to1::thread_y_V_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,2,2>(sel_V_read_read_fu_58_p2.read(), ap_const_lv2_3)) || 
         (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,2,2>(sel_V_read_read_fu_58_p2.read(), ap_const_lv2_2)) || 
         (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,2,2>(sel_V_read_read_fu_58_p2.read(), ap_const_lv2_1)) || 
         (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,2,2>(sel_V_read_read_fu_58_p2.read(), ap_const_lv2_0)))) {
        y_V_ap_vld = ap_const_logic_1;
    } else {
        y_V_ap_vld = ap_const_logic_0;
    }
}

void mux4to1::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"sel_V\" :  \"" << sel_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"d0_V\" :  \"" << d0_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"d1_V\" :  \"" << d1_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"d2_V\" :  \"" << d2_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"d3_V\" :  \"" << d3_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_V\" :  \"" << y_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_V_ap_vld\" :  \"" << y_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

